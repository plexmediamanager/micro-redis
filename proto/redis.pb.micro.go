// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: redis.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RedisService service

type RedisService interface {
	SetValue(ctx context.Context, in *SetRedisObject, opts ...client.CallOption) (*RedisEmpty, error)
	GetValue(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultBytes, error)
	GetValueAllowEmpty(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultString, error)
	GetValueAsInt(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultInt, error)
	GetValueAsInt64(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultInt64, error)
	GetValueAsUInt64(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultUInt64, error)
	GetValueAsFloat32(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultFloat32, error)
	GetValueAsFloat64(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultFloat64, error)
	GetValueAsTime(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultUInt64, error)
	Increment(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultInt64, error)
	IncrementBy(ctx context.Context, in *IncrementDecrementRedis, opts ...client.CallOption) (*RedisResultInt64, error)
	Decrement(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultInt64, error)
	DecrementBy(ctx context.Context, in *IncrementDecrementRedis, opts ...client.CallOption) (*RedisResultInt64, error)
	Has(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultBoolean, error)
	Remove(ctx context.Context, in *GetRedisKeys, opts ...client.CallOption) (*RedisResultInt64, error)
}

type redisService struct {
	c    client.Client
	name string
}

func NewRedisService(name string, c client.Client) RedisService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &redisService{
		c:    c,
		name: name,
	}
}

func (c *redisService) SetValue(ctx context.Context, in *SetRedisObject, opts ...client.CallOption) (*RedisEmpty, error) {
	req := c.c.NewRequest(c.name, "RedisService.SetValue", in)
	out := new(RedisEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) GetValue(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultBytes, error) {
	req := c.c.NewRequest(c.name, "RedisService.GetValue", in)
	out := new(RedisResultBytes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) GetValueAllowEmpty(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultString, error) {
	req := c.c.NewRequest(c.name, "RedisService.GetValueAllowEmpty", in)
	out := new(RedisResultString)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) GetValueAsInt(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultInt, error) {
	req := c.c.NewRequest(c.name, "RedisService.GetValueAsInt", in)
	out := new(RedisResultInt)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) GetValueAsInt64(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultInt64, error) {
	req := c.c.NewRequest(c.name, "RedisService.GetValueAsInt64", in)
	out := new(RedisResultInt64)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) GetValueAsUInt64(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultUInt64, error) {
	req := c.c.NewRequest(c.name, "RedisService.GetValueAsUInt64", in)
	out := new(RedisResultUInt64)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) GetValueAsFloat32(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultFloat32, error) {
	req := c.c.NewRequest(c.name, "RedisService.GetValueAsFloat32", in)
	out := new(RedisResultFloat32)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) GetValueAsFloat64(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultFloat64, error) {
	req := c.c.NewRequest(c.name, "RedisService.GetValueAsFloat64", in)
	out := new(RedisResultFloat64)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) GetValueAsTime(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultUInt64, error) {
	req := c.c.NewRequest(c.name, "RedisService.GetValueAsTime", in)
	out := new(RedisResultUInt64)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) Increment(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultInt64, error) {
	req := c.c.NewRequest(c.name, "RedisService.Increment", in)
	out := new(RedisResultInt64)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) IncrementBy(ctx context.Context, in *IncrementDecrementRedis, opts ...client.CallOption) (*RedisResultInt64, error) {
	req := c.c.NewRequest(c.name, "RedisService.IncrementBy", in)
	out := new(RedisResultInt64)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) Decrement(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultInt64, error) {
	req := c.c.NewRequest(c.name, "RedisService.Decrement", in)
	out := new(RedisResultInt64)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) DecrementBy(ctx context.Context, in *IncrementDecrementRedis, opts ...client.CallOption) (*RedisResultInt64, error) {
	req := c.c.NewRequest(c.name, "RedisService.DecrementBy", in)
	out := new(RedisResultInt64)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) Has(ctx context.Context, in *GetRedisKey, opts ...client.CallOption) (*RedisResultBoolean, error) {
	req := c.c.NewRequest(c.name, "RedisService.Has", in)
	out := new(RedisResultBoolean)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisService) Remove(ctx context.Context, in *GetRedisKeys, opts ...client.CallOption) (*RedisResultInt64, error) {
	req := c.c.NewRequest(c.name, "RedisService.Remove", in)
	out := new(RedisResultInt64)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RedisService service

type RedisServiceHandler interface {
	SetValue(context.Context, *SetRedisObject, *RedisEmpty) error
	GetValue(context.Context, *GetRedisKey, *RedisResultBytes) error
	GetValueAllowEmpty(context.Context, *GetRedisKey, *RedisResultString) error
	GetValueAsInt(context.Context, *GetRedisKey, *RedisResultInt) error
	GetValueAsInt64(context.Context, *GetRedisKey, *RedisResultInt64) error
	GetValueAsUInt64(context.Context, *GetRedisKey, *RedisResultUInt64) error
	GetValueAsFloat32(context.Context, *GetRedisKey, *RedisResultFloat32) error
	GetValueAsFloat64(context.Context, *GetRedisKey, *RedisResultFloat64) error
	GetValueAsTime(context.Context, *GetRedisKey, *RedisResultUInt64) error
	Increment(context.Context, *GetRedisKey, *RedisResultInt64) error
	IncrementBy(context.Context, *IncrementDecrementRedis, *RedisResultInt64) error
	Decrement(context.Context, *GetRedisKey, *RedisResultInt64) error
	DecrementBy(context.Context, *IncrementDecrementRedis, *RedisResultInt64) error
	Has(context.Context, *GetRedisKey, *RedisResultBoolean) error
	Remove(context.Context, *GetRedisKeys, *RedisResultInt64) error
}

func RegisterRedisServiceHandler(s server.Server, hdlr RedisServiceHandler, opts ...server.HandlerOption) error {
	type redisService interface {
		SetValue(ctx context.Context, in *SetRedisObject, out *RedisEmpty) error
		GetValue(ctx context.Context, in *GetRedisKey, out *RedisResultBytes) error
		GetValueAllowEmpty(ctx context.Context, in *GetRedisKey, out *RedisResultString) error
		GetValueAsInt(ctx context.Context, in *GetRedisKey, out *RedisResultInt) error
		GetValueAsInt64(ctx context.Context, in *GetRedisKey, out *RedisResultInt64) error
		GetValueAsUInt64(ctx context.Context, in *GetRedisKey, out *RedisResultUInt64) error
		GetValueAsFloat32(ctx context.Context, in *GetRedisKey, out *RedisResultFloat32) error
		GetValueAsFloat64(ctx context.Context, in *GetRedisKey, out *RedisResultFloat64) error
		GetValueAsTime(ctx context.Context, in *GetRedisKey, out *RedisResultUInt64) error
		Increment(ctx context.Context, in *GetRedisKey, out *RedisResultInt64) error
		IncrementBy(ctx context.Context, in *IncrementDecrementRedis, out *RedisResultInt64) error
		Decrement(ctx context.Context, in *GetRedisKey, out *RedisResultInt64) error
		DecrementBy(ctx context.Context, in *IncrementDecrementRedis, out *RedisResultInt64) error
		Has(ctx context.Context, in *GetRedisKey, out *RedisResultBoolean) error
		Remove(ctx context.Context, in *GetRedisKeys, out *RedisResultInt64) error
	}
	type RedisService struct {
		redisService
	}
	h := &redisServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RedisService{h}, opts...))
}

type redisServiceHandler struct {
	RedisServiceHandler
}

func (h *redisServiceHandler) SetValue(ctx context.Context, in *SetRedisObject, out *RedisEmpty) error {
	return h.RedisServiceHandler.SetValue(ctx, in, out)
}

func (h *redisServiceHandler) GetValue(ctx context.Context, in *GetRedisKey, out *RedisResultBytes) error {
	return h.RedisServiceHandler.GetValue(ctx, in, out)
}

func (h *redisServiceHandler) GetValueAllowEmpty(ctx context.Context, in *GetRedisKey, out *RedisResultString) error {
	return h.RedisServiceHandler.GetValueAllowEmpty(ctx, in, out)
}

func (h *redisServiceHandler) GetValueAsInt(ctx context.Context, in *GetRedisKey, out *RedisResultInt) error {
	return h.RedisServiceHandler.GetValueAsInt(ctx, in, out)
}

func (h *redisServiceHandler) GetValueAsInt64(ctx context.Context, in *GetRedisKey, out *RedisResultInt64) error {
	return h.RedisServiceHandler.GetValueAsInt64(ctx, in, out)
}

func (h *redisServiceHandler) GetValueAsUInt64(ctx context.Context, in *GetRedisKey, out *RedisResultUInt64) error {
	return h.RedisServiceHandler.GetValueAsUInt64(ctx, in, out)
}

func (h *redisServiceHandler) GetValueAsFloat32(ctx context.Context, in *GetRedisKey, out *RedisResultFloat32) error {
	return h.RedisServiceHandler.GetValueAsFloat32(ctx, in, out)
}

func (h *redisServiceHandler) GetValueAsFloat64(ctx context.Context, in *GetRedisKey, out *RedisResultFloat64) error {
	return h.RedisServiceHandler.GetValueAsFloat64(ctx, in, out)
}

func (h *redisServiceHandler) GetValueAsTime(ctx context.Context, in *GetRedisKey, out *RedisResultUInt64) error {
	return h.RedisServiceHandler.GetValueAsTime(ctx, in, out)
}

func (h *redisServiceHandler) Increment(ctx context.Context, in *GetRedisKey, out *RedisResultInt64) error {
	return h.RedisServiceHandler.Increment(ctx, in, out)
}

func (h *redisServiceHandler) IncrementBy(ctx context.Context, in *IncrementDecrementRedis, out *RedisResultInt64) error {
	return h.RedisServiceHandler.IncrementBy(ctx, in, out)
}

func (h *redisServiceHandler) Decrement(ctx context.Context, in *GetRedisKey, out *RedisResultInt64) error {
	return h.RedisServiceHandler.Decrement(ctx, in, out)
}

func (h *redisServiceHandler) DecrementBy(ctx context.Context, in *IncrementDecrementRedis, out *RedisResultInt64) error {
	return h.RedisServiceHandler.DecrementBy(ctx, in, out)
}

func (h *redisServiceHandler) Has(ctx context.Context, in *GetRedisKey, out *RedisResultBoolean) error {
	return h.RedisServiceHandler.Has(ctx, in, out)
}

func (h *redisServiceHandler) Remove(ctx context.Context, in *GetRedisKeys, out *RedisResultInt64) error {
	return h.RedisServiceHandler.Remove(ctx, in, out)
}
